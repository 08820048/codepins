package cn.ilikexff.codepins.ui;

import cn.ilikexff.codepins.services.LicenseService;
import cn.ilikexff.codepins.utils.SocialSharingUtil;
import cn.ilikexff.codepins.utils.WatermarkManager;
import com.intellij.openapi.util.IconLoader;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.Messages;
import com.intellij.ui.ColorPanel;
import com.intellij.ui.components.JBLabel;
import com.intellij.ui.components.JBRadioButton;
import com.intellij.util.ui.JBUI;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.io.File;

/**
 * 水印设置对话框
 * 用于设置水印选项
 */
public class WatermarkSettingsDialog extends DialogWrapper {

    private final Project project;

    private JRadioButton textWatermarkRadio;
    private JRadioButton imageWatermarkRadio;
    private JRadioButton noWatermarkRadio;

    private JTextField textField;
    private JComboBox<WatermarkManager.WatermarkPosition> positionComboBox;
    private ColorPanel colorPanel;
    private JSlider opacitySlider;

    private JTextField imagePathField;
    private JButton browseButton;

    private JPanel textPanel;
    private JPanel imagePanel;

    /**
     * 构造函数
     *
     * @param project 当前项目
     */
    public WatermarkSettingsDialog(Project project) {
        super(project);
        this.project = project;

        setTitle("水印设置");
        setSize(500, 400);
        init();
    }

    @Override
    protected @Nullable JComponent createCenterPanel() {
        JPanel dialogPanel = new JPanel(new BorderLayout());
        dialogPanel.setBorder(JBUI.Borders.empty(10));

        // 创建水印类型选择面板
        JPanel typePanel = new JPanel(new GridLayout(0, 1));
        typePanel.setBorder(BorderFactory.createTitledBorder("水印类型"));

        // 水印类型选项
        textWatermarkRadio = new JBRadioButton("文本水印");
        imageWatermarkRadio = new JBRadioButton("图片水印");
        noWatermarkRadio = new JBRadioButton("无水印");

        // 默认选择文本水印
        textWatermarkRadio.setSelected(true);

        // 添加到按钮组
        ButtonGroup typeGroup = new ButtonGroup();
        typeGroup.add(textWatermarkRadio);
        typeGroup.add(imageWatermarkRadio);
        typeGroup.add(noWatermarkRadio);

        // 添加到面板
        typePanel.add(textWatermarkRadio);
        typePanel.add(imageWatermarkRadio);
        typePanel.add(noWatermarkRadio);

        // 创建文本水印设置面板
        textPanel = new JPanel(new GridLayout(0, 2, 10, 10));
        textPanel.setBorder(BorderFactory.createTitledBorder("文本水印设置"));

        // 文本输入
        textPanel.add(new JBLabel("水印文本:"));
        textField = new JTextField("Generated by CodePins - Code Bookmarks");
        textPanel.add(textField);

        // 位置选择
        textPanel.add(new JBLabel("水印位置:"));
        positionComboBox = new JComboBox<>(WatermarkManager.WatermarkPosition.values());
        positionComboBox.setSelectedItem(WatermarkManager.WatermarkPosition.BOTTOM_RIGHT);
        textPanel.add(positionComboBox);

        // 颜色选择
        textPanel.add(new JBLabel("水印颜色:"));
        colorPanel = new ColorPanel();
        colorPanel.setSelectedColor(new Color(128, 128, 128, 128));
        textPanel.add(colorPanel);

        // 透明度滑块
        textPanel.add(new JBLabel("透明度:"));
        opacitySlider = new JSlider(0, 100, 50);
        opacitySlider.setMajorTickSpacing(25);
        opacitySlider.setMinorTickSpacing(5);
        opacitySlider.setPaintTicks(true);
        opacitySlider.setPaintLabels(true);
        textPanel.add(opacitySlider);

        // 创建图片水印设置面板
        imagePanel = new JPanel(new GridLayout(0, 2, 10, 10));
        imagePanel.setBorder(BorderFactory.createTitledBorder("图片水印设置"));

        // 图片路径
        imagePanel.add(new JBLabel("水印图片:"));
        JPanel pathPanel = new JPanel(new BorderLayout());
        imagePathField = new JTextField();
        browseButton = new JButton("浏览...");
        pathPanel.add(imagePathField, BorderLayout.CENTER);
        pathPanel.add(browseButton, BorderLayout.EAST);
        imagePanel.add(pathPanel);

        // 位置选择
        imagePanel.add(new JBLabel("水印位置:"));
        JComboBox<WatermarkManager.WatermarkPosition> imagePositionComboBox =
                new JComboBox<>(WatermarkManager.WatermarkPosition.values());
        imagePositionComboBox.setSelectedItem(WatermarkManager.WatermarkPosition.BOTTOM_RIGHT);
        imagePanel.add(imagePositionComboBox);

        // 透明度滑块
        imagePanel.add(new JBLabel("透明度:"));
        JSlider imageOpacitySlider = new JSlider(0, 100, 50);
        imageOpacitySlider.setMajorTickSpacing(25);
        imageOpacitySlider.setMinorTickSpacing(5);
        imageOpacitySlider.setPaintTicks(true);
        imageOpacitySlider.setPaintLabels(true);
        imagePanel.add(imageOpacitySlider);

        // 浏览按钮点击事件
        browseButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.setDialogTitle("选择水印图片");

            // 设置文件过滤器
            fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    String name = f.getName().toLowerCase();
                    return name.endsWith(".png") || name.endsWith(".jpg") ||
                           name.endsWith(".jpeg") || name.endsWith(".gif");
                }

                @Override
                public String getDescription() {
                    return "图片文件 (*.png, *.jpg, *.jpeg, *.gif)";
                }
            });

            int result = fileChooser.showOpenDialog(dialogPanel);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                imagePathField.setText(selectedFile.getAbsolutePath());
            }
        });

        // 初始状态下只显示文本水印设置面板
        imagePanel.setVisible(false);

        // 添加水印类型选择监听器
        textWatermarkRadio.addActionListener(e -> {
            textPanel.setVisible(true);
            imagePanel.setVisible(false);
        });

        imageWatermarkRadio.addActionListener(e -> {
            textPanel.setVisible(false);
            imagePanel.setVisible(true);
        });

        noWatermarkRadio.addActionListener(e -> {
            textPanel.setVisible(false);
            imagePanel.setVisible(false);
        });

        // 检查是否为付费用户
        boolean isPremium = SocialSharingUtil.isPremiumUser();
        if (!isPremium) {
            // 非付费用户禁用图片水印和无水印选项
            imageWatermarkRadio.setEnabled(false);
            imageWatermarkRadio.setText(imageWatermarkRadio.getText() + " (专业版功能)");
            noWatermarkRadio.setEnabled(false);
            noWatermarkRadio.setText(noWatermarkRadio.getText() + " (专业版功能)");

            // 添加点击事件，显示升级对话框
            imageWatermarkRadio.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent e) {
                    // 显示升级对话框
                    LicenseService.getInstance().showUpgradeDialogIfNeeded(project, "图片水印");
                }
            });

            noWatermarkRadio.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent e) {
                    // 显示升级对话框
                    LicenseService.getInstance().showUpgradeDialogIfNeeded(project, "移除水印");
                }
            });

            // 禁用文本水印的自定义选项
            textField.setEnabled(false);
            positionComboBox.setEnabled(false);
            colorPanel.setEnabled(false);
            opacitySlider.setEnabled(false);

            // 添加点击事件，显示升级对话框
            textField.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent e) {
                    // 显示升级对话框
                    LicenseService.getInstance().showUpgradeDialogIfNeeded(project, "自定义文本水印");
                }
            });

            positionComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent e) {
                    // 显示升级对话框
                    LicenseService.getInstance().showUpgradeDialogIfNeeded(project, "自定义水印位置");
                }
            });

            colorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent e) {
                    // 显示升级对话框
                    LicenseService.getInstance().showUpgradeDialogIfNeeded(project, "自定义水印颜色");
                }
            });

            opacitySlider.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent e) {
                    // 显示升级对话框
                    LicenseService.getInstance().showUpgradeDialogIfNeeded(project, "自定义水印透明度");
                }
            });

            // 添加升级提示
            JPanel upgradePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
            Icon infoIcon = IconLoader.getIcon("/icons/info.svg", getClass());
            JButton upgradeButton = new JButton("升级到专业版", infoIcon);
            upgradeButton.addActionListener(e -> {
                // 显示升级对话框
                LicenseService.getInstance().showUpgradeDialogIfNeeded(project, "水印设置");
            });
            upgradePanel.add(upgradeButton);

            // 添加到对话框
            dialogPanel.add(upgradePanel, BorderLayout.SOUTH);
        }

        // 组装面板
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.add(typePanel, BorderLayout.NORTH);

        JPanel settingsPanel = new JPanel(new CardLayout());
        settingsPanel.add(textPanel, "text");
        settingsPanel.add(imagePanel, "image");

        mainPanel.add(settingsPanel, BorderLayout.CENTER);

        dialogPanel.add(mainPanel, BorderLayout.CENTER);

        return dialogPanel;
    }

    @Override
    protected void doOKAction() {
        try {
            // 检查是否为付费用户
            boolean isPremium = SocialSharingUtil.isPremiumUser();

            // 获取水印类型
            WatermarkManager.WatermarkType type;
            if (textWatermarkRadio.isSelected()) {
                type = WatermarkManager.WatermarkType.TEXT;
            } else if (imageWatermarkRadio.isSelected() && isPremium) {
                type = WatermarkManager.WatermarkType.IMAGE;
            } else if (noWatermarkRadio.isSelected() && isPremium) {
                type = WatermarkManager.WatermarkType.NONE;
            } else {
                // 默认使用文本水印
                type = WatermarkManager.WatermarkType.TEXT;
            }

            // 如果用户选择了付费功能但不是付费用户，显示升级对话框
            if (!isPremium && (imageWatermarkRadio.isSelected() || noWatermarkRadio.isSelected())) {
                LicenseService.getInstance().showUpgradeDialogIfNeeded(project,
                    imageWatermarkRadio.isSelected() ? "图片水印" : "移除水印");
                return; // 不关闭对话框
            }

            // TODO: 保存水印设置到配置

            super.doOKAction();
        } catch (Exception e) {
            Messages.showErrorDialog(
                    project,
                    "保存水印设置失败: " + e.getMessage(),
                    "设置错误"
            );
        }
    }
}
